// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/partitio/atlas-app-toolkit/query/collection_operators.proto

package query

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Order is a sort order.
type SortCriteria_Order int32

const (
	// ascending sort order
	SortCriteria_ASC SortCriteria_Order = 0
	// descending sort order
	SortCriteria_DESC SortCriteria_Order = 1
)

var SortCriteria_Order_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}

var SortCriteria_Order_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x SortCriteria_Order) String() string {
	return proto.EnumName(SortCriteria_Order_name, int32(x))
}

func (SortCriteria_Order) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{0, 0}
}

type LogicalOperator_Type int32

const (
	LogicalOperator_AND LogicalOperator_Type = 0
	LogicalOperator_OR  LogicalOperator_Type = 1
)

var LogicalOperator_Type_name = map[int32]string{
	0: "AND",
	1: "OR",
}

var LogicalOperator_Type_value = map[string]int32{
	"AND": 0,
	"OR":  1,
}

func (x LogicalOperator_Type) String() string {
	return proto.EnumName(LogicalOperator_Type_name, int32(x))
}

func (LogicalOperator_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{5, 0}
}

type StringCondition_Type int32

const (
	StringCondition_EQ    StringCondition_Type = 0
	StringCondition_MATCH StringCondition_Type = 1
	StringCondition_GT    StringCondition_Type = 2
	StringCondition_GE    StringCondition_Type = 3
	StringCondition_LT    StringCondition_Type = 4
	StringCondition_LE    StringCondition_Type = 5
	StringCondition_IEQ   StringCondition_Type = 6
)

var StringCondition_Type_name = map[int32]string{
	0: "EQ",
	1: "MATCH",
	2: "GT",
	3: "GE",
	4: "LT",
	5: "LE",
	6: "IEQ",
}

var StringCondition_Type_value = map[string]int32{
	"EQ":    0,
	"MATCH": 1,
	"GT":    2,
	"GE":    3,
	"LT":    4,
	"LE":    5,
	"IEQ":   6,
}

func (x StringCondition_Type) String() string {
	return proto.EnumName(StringCondition_Type_name, int32(x))
}

func (StringCondition_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{6, 0}
}

type NumberCondition_Type int32

const (
	NumberCondition_EQ NumberCondition_Type = 0
	NumberCondition_GT NumberCondition_Type = 1
	NumberCondition_GE NumberCondition_Type = 2
	NumberCondition_LT NumberCondition_Type = 3
	NumberCondition_LE NumberCondition_Type = 4
)

var NumberCondition_Type_name = map[int32]string{
	0: "EQ",
	1: "GT",
	2: "GE",
	3: "LT",
	4: "LE",
}

var NumberCondition_Type_value = map[string]int32{
	"EQ": 0,
	"GT": 1,
	"GE": 2,
	"LT": 3,
	"LE": 4,
}

func (x NumberCondition_Type) String() string {
	return proto.EnumName(NumberCondition_Type_name, int32(x))
}

func (NumberCondition_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{7, 0}
}

type StringArrayCondition_Type int32

const (
	StringArrayCondition_IN StringArrayCondition_Type = 0
)

var StringArrayCondition_Type_name = map[int32]string{
	0: "IN",
}

var StringArrayCondition_Type_value = map[string]int32{
	"IN": 0,
}

func (x StringArrayCondition_Type) String() string {
	return proto.EnumName(StringArrayCondition_Type_name, int32(x))
}

func (StringArrayCondition_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{10, 0}
}

type NumberArrayCondition_Type int32

const (
	NumberArrayCondition_IN NumberArrayCondition_Type = 0
)

var NumberArrayCondition_Type_name = map[int32]string{
	0: "IN",
}

var NumberArrayCondition_Type_value = map[string]int32{
	"IN": 0,
}

func (x NumberArrayCondition_Type) String() string {
	return proto.EnumName(NumberArrayCondition_Type_name, int32(x))
}

func (NumberArrayCondition_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{11, 0}
}

// SortCriteria represents sort criteria
type SortCriteria struct {
	// Tag is a JSON tag.
	Tag                  string             `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Order                SortCriteria_Order `protobuf:"varint,2,opt,name=order,proto3,enum=infoblox.api.SortCriteria_Order" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SortCriteria) Reset()         { *m = SortCriteria{} }
func (m *SortCriteria) String() string { return proto.CompactTextString(m) }
func (*SortCriteria) ProtoMessage()    {}
func (*SortCriteria) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{0}
}

func (m *SortCriteria) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SortCriteria.Unmarshal(m, b)
}
func (m *SortCriteria) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SortCriteria.Marshal(b, m, deterministic)
}
func (m *SortCriteria) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortCriteria.Merge(m, src)
}
func (m *SortCriteria) XXX_Size() int {
	return xxx_messageInfo_SortCriteria.Size(m)
}
func (m *SortCriteria) XXX_DiscardUnknown() {
	xxx_messageInfo_SortCriteria.DiscardUnknown(m)
}

var xxx_messageInfo_SortCriteria proto.InternalMessageInfo

func (m *SortCriteria) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *SortCriteria) GetOrder() SortCriteria_Order {
	if m != nil {
		return m.Order
	}
	return SortCriteria_ASC
}

// Sorting represents list of sort criterias.
type Sorting struct {
	Criterias            []*SortCriteria `protobuf:"bytes,1,rep,name=criterias,proto3" json:"criterias,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Sorting) Reset()         { *m = Sorting{} }
func (m *Sorting) String() string { return proto.CompactTextString(m) }
func (*Sorting) ProtoMessage()    {}
func (*Sorting) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{1}
}

func (m *Sorting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sorting.Unmarshal(m, b)
}
func (m *Sorting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sorting.Marshal(b, m, deterministic)
}
func (m *Sorting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sorting.Merge(m, src)
}
func (m *Sorting) XXX_Size() int {
	return xxx_messageInfo_Sorting.Size(m)
}
func (m *Sorting) XXX_DiscardUnknown() {
	xxx_messageInfo_Sorting.DiscardUnknown(m)
}

var xxx_messageInfo_Sorting proto.InternalMessageInfo

func (m *Sorting) GetCriterias() []*SortCriteria {
	if m != nil {
		return m.Criterias
	}
	return nil
}

// FieldSelection represents a group of fields for some object.
// Main use case for if is to store information about object fields that
// need to be ratained prior to sending object as a response
type FieldSelection struct {
	Fields               map[string]*Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FieldSelection) Reset()         { *m = FieldSelection{} }
func (m *FieldSelection) String() string { return proto.CompactTextString(m) }
func (*FieldSelection) ProtoMessage()    {}
func (*FieldSelection) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{2}
}

func (m *FieldSelection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldSelection.Unmarshal(m, b)
}
func (m *FieldSelection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldSelection.Marshal(b, m, deterministic)
}
func (m *FieldSelection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldSelection.Merge(m, src)
}
func (m *FieldSelection) XXX_Size() int {
	return xxx_messageInfo_FieldSelection.Size(m)
}
func (m *FieldSelection) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldSelection.DiscardUnknown(m)
}

var xxx_messageInfo_FieldSelection proto.InternalMessageInfo

func (m *FieldSelection) GetFields() map[string]*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

// Field represents a single field for an object.
// It contains fields name and also may contain a group of sub-fields for cases
// when a fields represents some structure.
type Field struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Subs                 map[string]*Field `protobuf:"bytes,2,rep,name=subs,proto3" json:"subs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Field) Reset()         { *m = Field{} }
func (m *Field) String() string { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()    {}
func (*Field) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{3}
}

func (m *Field) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Field.Unmarshal(m, b)
}
func (m *Field) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Field.Marshal(b, m, deterministic)
}
func (m *Field) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Field.Merge(m, src)
}
func (m *Field) XXX_Size() int {
	return xxx_messageInfo_Field.Size(m)
}
func (m *Field) XXX_DiscardUnknown() {
	xxx_messageInfo_Field.DiscardUnknown(m)
}

var xxx_messageInfo_Field proto.InternalMessageInfo

func (m *Field) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Field) GetSubs() map[string]*Field {
	if m != nil {
		return m.Subs
	}
	return nil
}

// Filtering represents filtering expression.
// root could be either LogicalOperator or one of the supported conditions.
type Filtering struct {
	// Types that are valid to be assigned to Root:
	//	*Filtering_Operator
	//	*Filtering_StringCondition
	//	*Filtering_NumberCondition
	//	*Filtering_NullCondition
	//	*Filtering_StringArrayCondition
	//	*Filtering_NumberArrayCondition
	//	*Filtering_BoolCondition
	Root                 isFiltering_Root `protobuf_oneof:"root"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Filtering) Reset()         { *m = Filtering{} }
func (m *Filtering) String() string { return proto.CompactTextString(m) }
func (*Filtering) ProtoMessage()    {}
func (*Filtering) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{4}
}

func (m *Filtering) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filtering.Unmarshal(m, b)
}
func (m *Filtering) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filtering.Marshal(b, m, deterministic)
}
func (m *Filtering) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filtering.Merge(m, src)
}
func (m *Filtering) XXX_Size() int {
	return xxx_messageInfo_Filtering.Size(m)
}
func (m *Filtering) XXX_DiscardUnknown() {
	xxx_messageInfo_Filtering.DiscardUnknown(m)
}

var xxx_messageInfo_Filtering proto.InternalMessageInfo

type isFiltering_Root interface {
	isFiltering_Root()
}

type Filtering_Operator struct {
	Operator *LogicalOperator `protobuf:"bytes,1,opt,name=operator,proto3,oneof"`
}

type Filtering_StringCondition struct {
	StringCondition *StringCondition `protobuf:"bytes,2,opt,name=string_condition,json=stringCondition,proto3,oneof"`
}

type Filtering_NumberCondition struct {
	NumberCondition *NumberCondition `protobuf:"bytes,3,opt,name=number_condition,json=numberCondition,proto3,oneof"`
}

type Filtering_NullCondition struct {
	NullCondition *NullCondition `protobuf:"bytes,4,opt,name=null_condition,json=nullCondition,proto3,oneof"`
}

type Filtering_StringArrayCondition struct {
	StringArrayCondition *StringArrayCondition `protobuf:"bytes,5,opt,name=string_array_condition,json=stringArrayCondition,proto3,oneof"`
}

type Filtering_NumberArrayCondition struct {
	NumberArrayCondition *NumberArrayCondition `protobuf:"bytes,6,opt,name=number_array_condition,json=numberArrayCondition,proto3,oneof"`
}

type Filtering_BoolCondition struct {
	BoolCondition *BoolCondition `protobuf:"bytes,7,opt,name=bool_condition,json=boolCondition,proto3,oneof"`
}

func (*Filtering_Operator) isFiltering_Root() {}

func (*Filtering_StringCondition) isFiltering_Root() {}

func (*Filtering_NumberCondition) isFiltering_Root() {}

func (*Filtering_NullCondition) isFiltering_Root() {}

func (*Filtering_StringArrayCondition) isFiltering_Root() {}

func (*Filtering_NumberArrayCondition) isFiltering_Root() {}

func (*Filtering_BoolCondition) isFiltering_Root() {}

func (m *Filtering) GetRoot() isFiltering_Root {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *Filtering) GetOperator() *LogicalOperator {
	if x, ok := m.GetRoot().(*Filtering_Operator); ok {
		return x.Operator
	}
	return nil
}

func (m *Filtering) GetStringCondition() *StringCondition {
	if x, ok := m.GetRoot().(*Filtering_StringCondition); ok {
		return x.StringCondition
	}
	return nil
}

func (m *Filtering) GetNumberCondition() *NumberCondition {
	if x, ok := m.GetRoot().(*Filtering_NumberCondition); ok {
		return x.NumberCondition
	}
	return nil
}

func (m *Filtering) GetNullCondition() *NullCondition {
	if x, ok := m.GetRoot().(*Filtering_NullCondition); ok {
		return x.NullCondition
	}
	return nil
}

func (m *Filtering) GetStringArrayCondition() *StringArrayCondition {
	if x, ok := m.GetRoot().(*Filtering_StringArrayCondition); ok {
		return x.StringArrayCondition
	}
	return nil
}

func (m *Filtering) GetNumberArrayCondition() *NumberArrayCondition {
	if x, ok := m.GetRoot().(*Filtering_NumberArrayCondition); ok {
		return x.NumberArrayCondition
	}
	return nil
}

func (m *Filtering) GetBoolCondition() *BoolCondition {
	if x, ok := m.GetRoot().(*Filtering_BoolCondition); ok {
		return x.BoolCondition
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Filtering) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Filtering_Operator)(nil),
		(*Filtering_StringCondition)(nil),
		(*Filtering_NumberCondition)(nil),
		(*Filtering_NullCondition)(nil),
		(*Filtering_StringArrayCondition)(nil),
		(*Filtering_NumberArrayCondition)(nil),
		(*Filtering_BoolCondition)(nil),
	}
}

// LogicalOperator represents binary logical operator, either AND or OR depending on type.
// left and right are respectively left and right operands of the operator, could be
// either LogicalOperator or one of the supported conditions.
// is_negative is set to true if the operator is negated.
type LogicalOperator struct {
	// Types that are valid to be assigned to Left:
	//	*LogicalOperator_LeftOperator
	//	*LogicalOperator_LeftStringCondition
	//	*LogicalOperator_LeftNumberCondition
	//	*LogicalOperator_LeftNullCondition
	//	*LogicalOperator_LeftStringArrayCondition
	//	*LogicalOperator_LeftNumberArrayCondition
	//	*LogicalOperator_LeftBoolCondition
	Left isLogicalOperator_Left `protobuf_oneof:"left"`
	// Types that are valid to be assigned to Right:
	//	*LogicalOperator_RightOperator
	//	*LogicalOperator_RightStringCondition
	//	*LogicalOperator_RightNumberCondition
	//	*LogicalOperator_RightNullCondition
	//	*LogicalOperator_RightStringArrayCondition
	//	*LogicalOperator_RightNumberArrayCondition
	//	*LogicalOperator_RightBoolCondition
	Right                isLogicalOperator_Right `protobuf_oneof:"right"`
	Type                 LogicalOperator_Type    `protobuf:"varint,9,opt,name=type,proto3,enum=infoblox.api.LogicalOperator_Type" json:"type,omitempty"`
	IsNegative           bool                    `protobuf:"varint,10,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LogicalOperator) Reset()         { *m = LogicalOperator{} }
func (m *LogicalOperator) String() string { return proto.CompactTextString(m) }
func (*LogicalOperator) ProtoMessage()    {}
func (*LogicalOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{5}
}

func (m *LogicalOperator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalOperator.Unmarshal(m, b)
}
func (m *LogicalOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalOperator.Marshal(b, m, deterministic)
}
func (m *LogicalOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalOperator.Merge(m, src)
}
func (m *LogicalOperator) XXX_Size() int {
	return xxx_messageInfo_LogicalOperator.Size(m)
}
func (m *LogicalOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalOperator.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalOperator proto.InternalMessageInfo

type isLogicalOperator_Left interface {
	isLogicalOperator_Left()
}

type LogicalOperator_LeftOperator struct {
	LeftOperator *LogicalOperator `protobuf:"bytes,1,opt,name=left_operator,json=leftOperator,proto3,oneof"`
}

type LogicalOperator_LeftStringCondition struct {
	LeftStringCondition *StringCondition `protobuf:"bytes,2,opt,name=left_string_condition,json=leftStringCondition,proto3,oneof"`
}

type LogicalOperator_LeftNumberCondition struct {
	LeftNumberCondition *NumberCondition `protobuf:"bytes,3,opt,name=left_number_condition,json=leftNumberCondition,proto3,oneof"`
}

type LogicalOperator_LeftNullCondition struct {
	LeftNullCondition *NullCondition `protobuf:"bytes,4,opt,name=left_null_condition,json=leftNullCondition,proto3,oneof"`
}

type LogicalOperator_LeftStringArrayCondition struct {
	LeftStringArrayCondition *StringArrayCondition `protobuf:"bytes,11,opt,name=left_string_array_condition,json=leftStringArrayCondition,proto3,oneof"`
}

type LogicalOperator_LeftNumberArrayCondition struct {
	LeftNumberArrayCondition *NumberArrayCondition `protobuf:"bytes,12,opt,name=left_number_array_condition,json=leftNumberArrayCondition,proto3,oneof"`
}

type LogicalOperator_LeftBoolCondition struct {
	LeftBoolCondition *BoolCondition `protobuf:"bytes,15,opt,name=left_bool_condition,json=leftBoolCondition,proto3,oneof"`
}

func (*LogicalOperator_LeftOperator) isLogicalOperator_Left() {}

func (*LogicalOperator_LeftStringCondition) isLogicalOperator_Left() {}

func (*LogicalOperator_LeftNumberCondition) isLogicalOperator_Left() {}

func (*LogicalOperator_LeftNullCondition) isLogicalOperator_Left() {}

func (*LogicalOperator_LeftStringArrayCondition) isLogicalOperator_Left() {}

func (*LogicalOperator_LeftNumberArrayCondition) isLogicalOperator_Left() {}

func (*LogicalOperator_LeftBoolCondition) isLogicalOperator_Left() {}

func (m *LogicalOperator) GetLeft() isLogicalOperator_Left {
	if m != nil {
		return m.Left
	}
	return nil
}

func (m *LogicalOperator) GetLeftOperator() *LogicalOperator {
	if x, ok := m.GetLeft().(*LogicalOperator_LeftOperator); ok {
		return x.LeftOperator
	}
	return nil
}

func (m *LogicalOperator) GetLeftStringCondition() *StringCondition {
	if x, ok := m.GetLeft().(*LogicalOperator_LeftStringCondition); ok {
		return x.LeftStringCondition
	}
	return nil
}

func (m *LogicalOperator) GetLeftNumberCondition() *NumberCondition {
	if x, ok := m.GetLeft().(*LogicalOperator_LeftNumberCondition); ok {
		return x.LeftNumberCondition
	}
	return nil
}

func (m *LogicalOperator) GetLeftNullCondition() *NullCondition {
	if x, ok := m.GetLeft().(*LogicalOperator_LeftNullCondition); ok {
		return x.LeftNullCondition
	}
	return nil
}

func (m *LogicalOperator) GetLeftStringArrayCondition() *StringArrayCondition {
	if x, ok := m.GetLeft().(*LogicalOperator_LeftStringArrayCondition); ok {
		return x.LeftStringArrayCondition
	}
	return nil
}

func (m *LogicalOperator) GetLeftNumberArrayCondition() *NumberArrayCondition {
	if x, ok := m.GetLeft().(*LogicalOperator_LeftNumberArrayCondition); ok {
		return x.LeftNumberArrayCondition
	}
	return nil
}

func (m *LogicalOperator) GetLeftBoolCondition() *BoolCondition {
	if x, ok := m.GetLeft().(*LogicalOperator_LeftBoolCondition); ok {
		return x.LeftBoolCondition
	}
	return nil
}

type isLogicalOperator_Right interface {
	isLogicalOperator_Right()
}

type LogicalOperator_RightOperator struct {
	RightOperator *LogicalOperator `protobuf:"bytes,5,opt,name=right_operator,json=rightOperator,proto3,oneof"`
}

type LogicalOperator_RightStringCondition struct {
	RightStringCondition *StringCondition `protobuf:"bytes,6,opt,name=right_string_condition,json=rightStringCondition,proto3,oneof"`
}

type LogicalOperator_RightNumberCondition struct {
	RightNumberCondition *NumberCondition `protobuf:"bytes,7,opt,name=right_number_condition,json=rightNumberCondition,proto3,oneof"`
}

type LogicalOperator_RightNullCondition struct {
	RightNullCondition *NullCondition `protobuf:"bytes,8,opt,name=right_null_condition,json=rightNullCondition,proto3,oneof"`
}

type LogicalOperator_RightStringArrayCondition struct {
	RightStringArrayCondition *StringArrayCondition `protobuf:"bytes,13,opt,name=right_string_array_condition,json=rightStringArrayCondition,proto3,oneof"`
}

type LogicalOperator_RightNumberArrayCondition struct {
	RightNumberArrayCondition *NumberArrayCondition `protobuf:"bytes,14,opt,name=right_number_array_condition,json=rightNumberArrayCondition,proto3,oneof"`
}

type LogicalOperator_RightBoolCondition struct {
	RightBoolCondition *BoolCondition `protobuf:"bytes,16,opt,name=right_bool_condition,json=rightBoolCondition,proto3,oneof"`
}

func (*LogicalOperator_RightOperator) isLogicalOperator_Right() {}

func (*LogicalOperator_RightStringCondition) isLogicalOperator_Right() {}

func (*LogicalOperator_RightNumberCondition) isLogicalOperator_Right() {}

func (*LogicalOperator_RightNullCondition) isLogicalOperator_Right() {}

func (*LogicalOperator_RightStringArrayCondition) isLogicalOperator_Right() {}

func (*LogicalOperator_RightNumberArrayCondition) isLogicalOperator_Right() {}

func (*LogicalOperator_RightBoolCondition) isLogicalOperator_Right() {}

func (m *LogicalOperator) GetRight() isLogicalOperator_Right {
	if m != nil {
		return m.Right
	}
	return nil
}

func (m *LogicalOperator) GetRightOperator() *LogicalOperator {
	if x, ok := m.GetRight().(*LogicalOperator_RightOperator); ok {
		return x.RightOperator
	}
	return nil
}

func (m *LogicalOperator) GetRightStringCondition() *StringCondition {
	if x, ok := m.GetRight().(*LogicalOperator_RightStringCondition); ok {
		return x.RightStringCondition
	}
	return nil
}

func (m *LogicalOperator) GetRightNumberCondition() *NumberCondition {
	if x, ok := m.GetRight().(*LogicalOperator_RightNumberCondition); ok {
		return x.RightNumberCondition
	}
	return nil
}

func (m *LogicalOperator) GetRightNullCondition() *NullCondition {
	if x, ok := m.GetRight().(*LogicalOperator_RightNullCondition); ok {
		return x.RightNullCondition
	}
	return nil
}

func (m *LogicalOperator) GetRightStringArrayCondition() *StringArrayCondition {
	if x, ok := m.GetRight().(*LogicalOperator_RightStringArrayCondition); ok {
		return x.RightStringArrayCondition
	}
	return nil
}

func (m *LogicalOperator) GetRightNumberArrayCondition() *NumberArrayCondition {
	if x, ok := m.GetRight().(*LogicalOperator_RightNumberArrayCondition); ok {
		return x.RightNumberArrayCondition
	}
	return nil
}

func (m *LogicalOperator) GetRightBoolCondition() *BoolCondition {
	if x, ok := m.GetRight().(*LogicalOperator_RightBoolCondition); ok {
		return x.RightBoolCondition
	}
	return nil
}

func (m *LogicalOperator) GetType() LogicalOperator_Type {
	if m != nil {
		return m.Type
	}
	return LogicalOperator_AND
}

func (m *LogicalOperator) GetIsNegative() bool {
	if m != nil {
		return m.IsNegative
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LogicalOperator) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LogicalOperator_LeftOperator)(nil),
		(*LogicalOperator_LeftStringCondition)(nil),
		(*LogicalOperator_LeftNumberCondition)(nil),
		(*LogicalOperator_LeftNullCondition)(nil),
		(*LogicalOperator_LeftStringArrayCondition)(nil),
		(*LogicalOperator_LeftNumberArrayCondition)(nil),
		(*LogicalOperator_LeftBoolCondition)(nil),
		(*LogicalOperator_RightOperator)(nil),
		(*LogicalOperator_RightStringCondition)(nil),
		(*LogicalOperator_RightNumberCondition)(nil),
		(*LogicalOperator_RightNullCondition)(nil),
		(*LogicalOperator_RightStringArrayCondition)(nil),
		(*LogicalOperator_RightNumberArrayCondition)(nil),
		(*LogicalOperator_RightBoolCondition)(nil),
	}
}

// StringCondition represents a condition with a string literal, e.g. field == 'string'.
// field_path is a reference to a value of a resource.
// value is the string literal.
// type is a type of the condition.
// is_negative is set to true if the condition is negated.
type StringCondition struct {
	FieldPath            []string             `protobuf:"bytes,1,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	Value                string               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Type                 StringCondition_Type `protobuf:"varint,3,opt,name=type,proto3,enum=infoblox.api.StringCondition_Type" json:"type,omitempty"`
	IsNegative           bool                 `protobuf:"varint,4,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StringCondition) Reset()         { *m = StringCondition{} }
func (m *StringCondition) String() string { return proto.CompactTextString(m) }
func (*StringCondition) ProtoMessage()    {}
func (*StringCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{6}
}

func (m *StringCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringCondition.Unmarshal(m, b)
}
func (m *StringCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringCondition.Marshal(b, m, deterministic)
}
func (m *StringCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringCondition.Merge(m, src)
}
func (m *StringCondition) XXX_Size() int {
	return xxx_messageInfo_StringCondition.Size(m)
}
func (m *StringCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_StringCondition.DiscardUnknown(m)
}

var xxx_messageInfo_StringCondition proto.InternalMessageInfo

func (m *StringCondition) GetFieldPath() []string {
	if m != nil {
		return m.FieldPath
	}
	return nil
}

func (m *StringCondition) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *StringCondition) GetType() StringCondition_Type {
	if m != nil {
		return m.Type
	}
	return StringCondition_EQ
}

func (m *StringCondition) GetIsNegative() bool {
	if m != nil {
		return m.IsNegative
	}
	return false
}

// NumberCondition represents a condition with a number literal, e.g. field > 3.
// field_path is a reference to a value of a resource.
// value is the number literal.
// type is a type of the condition.
// is_negative is set to true if the condition is negated.
type NumberCondition struct {
	FieldPath            []string             `protobuf:"bytes,1,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	Value                float64              `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Type                 NumberCondition_Type `protobuf:"varint,3,opt,name=type,proto3,enum=infoblox.api.NumberCondition_Type" json:"type,omitempty"`
	IsNegative           bool                 `protobuf:"varint,4,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NumberCondition) Reset()         { *m = NumberCondition{} }
func (m *NumberCondition) String() string { return proto.CompactTextString(m) }
func (*NumberCondition) ProtoMessage()    {}
func (*NumberCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{7}
}

func (m *NumberCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberCondition.Unmarshal(m, b)
}
func (m *NumberCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberCondition.Marshal(b, m, deterministic)
}
func (m *NumberCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberCondition.Merge(m, src)
}
func (m *NumberCondition) XXX_Size() int {
	return xxx_messageInfo_NumberCondition.Size(m)
}
func (m *NumberCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberCondition.DiscardUnknown(m)
}

var xxx_messageInfo_NumberCondition proto.InternalMessageInfo

func (m *NumberCondition) GetFieldPath() []string {
	if m != nil {
		return m.FieldPath
	}
	return nil
}

func (m *NumberCondition) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NumberCondition) GetType() NumberCondition_Type {
	if m != nil {
		return m.Type
	}
	return NumberCondition_EQ
}

func (m *NumberCondition) GetIsNegative() bool {
	if m != nil {
		return m.IsNegative
	}
	return false
}

// NullCondition represents a condition with a null literal, e.g. field == null.
// field_path is a reference to a value of a resource.
// is_negative is set to true if the condition is negated.
type NullCondition struct {
	FieldPath            []string `protobuf:"bytes,1,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	IsNegative           bool     `protobuf:"varint,2,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NullCondition) Reset()         { *m = NullCondition{} }
func (m *NullCondition) String() string { return proto.CompactTextString(m) }
func (*NullCondition) ProtoMessage()    {}
func (*NullCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{8}
}

func (m *NullCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NullCondition.Unmarshal(m, b)
}
func (m *NullCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NullCondition.Marshal(b, m, deterministic)
}
func (m *NullCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NullCondition.Merge(m, src)
}
func (m *NullCondition) XXX_Size() int {
	return xxx_messageInfo_NullCondition.Size(m)
}
func (m *NullCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_NullCondition.DiscardUnknown(m)
}

var xxx_messageInfo_NullCondition proto.InternalMessageInfo

func (m *NullCondition) GetFieldPath() []string {
	if m != nil {
		return m.FieldPath
	}
	return nil
}

func (m *NullCondition) GetIsNegative() bool {
	if m != nil {
		return m.IsNegative
	}
	return false
}

// BoolCondition represents a condition with a bool literal, e.g. field == true.
// field_path is a reference to a value of a resource.
// is_negative is set to true if the condition is negated.
type BoolCondition struct {
	FieldPath            []string `protobuf:"bytes,1,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	IsNegative           bool     `protobuf:"varint,2,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolCondition) Reset()         { *m = BoolCondition{} }
func (m *BoolCondition) String() string { return proto.CompactTextString(m) }
func (*BoolCondition) ProtoMessage()    {}
func (*BoolCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{9}
}

func (m *BoolCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolCondition.Unmarshal(m, b)
}
func (m *BoolCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolCondition.Marshal(b, m, deterministic)
}
func (m *BoolCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolCondition.Merge(m, src)
}
func (m *BoolCondition) XXX_Size() int {
	return xxx_messageInfo_BoolCondition.Size(m)
}
func (m *BoolCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolCondition.DiscardUnknown(m)
}

var xxx_messageInfo_BoolCondition proto.InternalMessageInfo

func (m *BoolCondition) GetFieldPath() []string {
	if m != nil {
		return m.FieldPath
	}
	return nil
}

func (m *BoolCondition) GetIsNegative() bool {
	if m != nil {
		return m.IsNegative
	}
	return false
}

// StringArrayCondition represents a condition with string arrays, e.g. field in ['hello','world']
// field_path is a reference to a value of a resource.
// is_negative is set to true if the condition is negated
type StringArrayCondition struct {
	FieldPath            []string                  `protobuf:"bytes,1,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	Values               []string                  `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	Type                 StringArrayCondition_Type `protobuf:"varint,3,opt,name=type,proto3,enum=infoblox.api.StringArrayCondition_Type" json:"type,omitempty"`
	IsNegative           bool                      `protobuf:"varint,4,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *StringArrayCondition) Reset()         { *m = StringArrayCondition{} }
func (m *StringArrayCondition) String() string { return proto.CompactTextString(m) }
func (*StringArrayCondition) ProtoMessage()    {}
func (*StringArrayCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{10}
}

func (m *StringArrayCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringArrayCondition.Unmarshal(m, b)
}
func (m *StringArrayCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringArrayCondition.Marshal(b, m, deterministic)
}
func (m *StringArrayCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringArrayCondition.Merge(m, src)
}
func (m *StringArrayCondition) XXX_Size() int {
	return xxx_messageInfo_StringArrayCondition.Size(m)
}
func (m *StringArrayCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_StringArrayCondition.DiscardUnknown(m)
}

var xxx_messageInfo_StringArrayCondition proto.InternalMessageInfo

func (m *StringArrayCondition) GetFieldPath() []string {
	if m != nil {
		return m.FieldPath
	}
	return nil
}

func (m *StringArrayCondition) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *StringArrayCondition) GetType() StringArrayCondition_Type {
	if m != nil {
		return m.Type
	}
	return StringArrayCondition_IN
}

func (m *StringArrayCondition) GetIsNegative() bool {
	if m != nil {
		return m.IsNegative
	}
	return false
}

// NumberArrayCondition represents a condition with string arrays, e.g. field in [1, 5, 7]
// field_path is a reference to a value of a resource.
// is_negative is set to true if the condition is negated
type NumberArrayCondition struct {
	FieldPath            []string                  `protobuf:"bytes,1,rep,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	Values               []float64                 `protobuf:"fixed64,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	Type                 NumberArrayCondition_Type `protobuf:"varint,3,opt,name=type,proto3,enum=infoblox.api.NumberArrayCondition_Type" json:"type,omitempty"`
	IsNegative           bool                      `protobuf:"varint,4,opt,name=is_negative,json=isNegative,proto3" json:"is_negative,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *NumberArrayCondition) Reset()         { *m = NumberArrayCondition{} }
func (m *NumberArrayCondition) String() string { return proto.CompactTextString(m) }
func (*NumberArrayCondition) ProtoMessage()    {}
func (*NumberArrayCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{11}
}

func (m *NumberArrayCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberArrayCondition.Unmarshal(m, b)
}
func (m *NumberArrayCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberArrayCondition.Marshal(b, m, deterministic)
}
func (m *NumberArrayCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberArrayCondition.Merge(m, src)
}
func (m *NumberArrayCondition) XXX_Size() int {
	return xxx_messageInfo_NumberArrayCondition.Size(m)
}
func (m *NumberArrayCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberArrayCondition.DiscardUnknown(m)
}

var xxx_messageInfo_NumberArrayCondition proto.InternalMessageInfo

func (m *NumberArrayCondition) GetFieldPath() []string {
	if m != nil {
		return m.FieldPath
	}
	return nil
}

func (m *NumberArrayCondition) GetValues() []float64 {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *NumberArrayCondition) GetType() NumberArrayCondition_Type {
	if m != nil {
		return m.Type
	}
	return NumberArrayCondition_IN
}

func (m *NumberArrayCondition) GetIsNegative() bool {
	if m != nil {
		return m.IsNegative
	}
	return false
}

// Pagination represents both server-driven and client-driven pagination request.
// Server-driven pagination is a model in which the server returns some
// amount of data along with an token indicating there is more data
// and where subsequent queries can get the next page of data.
// Client-driven pagination is a model in which rows are addressable by
// offset and page size (limit).
type Pagination struct {
	// The service-defined string used to identify a page of resources.
	// A null value indicates the first page.
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The integer index of the offset into a collection of resources.
	// If omitted or null the value is assumed to be "0".
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// The integer number of resources to be returned in the response.
	// The service may impose maximum value.
	// If omitted the service may impose a default value.
	Limit                int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pagination) Reset()         { *m = Pagination{} }
func (m *Pagination) String() string { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()    {}
func (*Pagination) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{12}
}

func (m *Pagination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pagination.Unmarshal(m, b)
}
func (m *Pagination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pagination.Marshal(b, m, deterministic)
}
func (m *Pagination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagination.Merge(m, src)
}
func (m *Pagination) XXX_Size() int {
	return xxx_messageInfo_Pagination.Size(m)
}
func (m *Pagination) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagination.DiscardUnknown(m)
}

var xxx_messageInfo_Pagination proto.InternalMessageInfo

func (m *Pagination) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *Pagination) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Pagination) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// PageInfo represents both server-driven and client-driven pagination response.
// Server-driven pagination is a model in which the server returns some
// amount of data along with an token indicating there is more data
// and where subsequent queries can get the next page of data.
// Client-driven pagination is a model in which rows are addressable by
// offset and page size (limit).
type PageInfo struct {
	// The service response should contain a string to indicate
	// the next page of resources.
	// A null value indicates no more pages.
	PageToken string `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The service may optionally include the total number of resources being paged.
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// The service may optionally include the offset of the next page of resources.
	// A null value indicates no more pages.
	Offset               int32    `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageInfo) Reset()         { *m = PageInfo{} }
func (m *PageInfo) String() string { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()    {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_68b1e11fc00ceab5, []int{13}
}

func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageInfo.Unmarshal(m, b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return xxx_messageInfo_PageInfo.Size(m)
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

func (m *PageInfo) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *PageInfo) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *PageInfo) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func init() {
	proto.RegisterEnum("infoblox.api.SortCriteria_Order", SortCriteria_Order_name, SortCriteria_Order_value)
	proto.RegisterEnum("infoblox.api.LogicalOperator_Type", LogicalOperator_Type_name, LogicalOperator_Type_value)
	proto.RegisterEnum("infoblox.api.StringCondition_Type", StringCondition_Type_name, StringCondition_Type_value)
	proto.RegisterEnum("infoblox.api.NumberCondition_Type", NumberCondition_Type_name, NumberCondition_Type_value)
	proto.RegisterEnum("infoblox.api.StringArrayCondition_Type", StringArrayCondition_Type_name, StringArrayCondition_Type_value)
	proto.RegisterEnum("infoblox.api.NumberArrayCondition_Type", NumberArrayCondition_Type_name, NumberArrayCondition_Type_value)
	proto.RegisterType((*SortCriteria)(nil), "infoblox.api.SortCriteria")
	proto.RegisterType((*Sorting)(nil), "infoblox.api.Sorting")
	proto.RegisterType((*FieldSelection)(nil), "infoblox.api.FieldSelection")
	proto.RegisterMapType((map[string]*Field)(nil), "infoblox.api.FieldSelection.FieldsEntry")
	proto.RegisterType((*Field)(nil), "infoblox.api.Field")
	proto.RegisterMapType((map[string]*Field)(nil), "infoblox.api.Field.SubsEntry")
	proto.RegisterType((*Filtering)(nil), "infoblox.api.Filtering")
	proto.RegisterType((*LogicalOperator)(nil), "infoblox.api.LogicalOperator")
	proto.RegisterType((*StringCondition)(nil), "infoblox.api.StringCondition")
	proto.RegisterType((*NumberCondition)(nil), "infoblox.api.NumberCondition")
	proto.RegisterType((*NullCondition)(nil), "infoblox.api.NullCondition")
	proto.RegisterType((*BoolCondition)(nil), "infoblox.api.BoolCondition")
	proto.RegisterType((*StringArrayCondition)(nil), "infoblox.api.StringArrayCondition")
	proto.RegisterType((*NumberArrayCondition)(nil), "infoblox.api.NumberArrayCondition")
	proto.RegisterType((*Pagination)(nil), "infoblox.api.Pagination")
	proto.RegisterType((*PageInfo)(nil), "infoblox.api.PageInfo")
}

func init() {
	proto.RegisterFile("github.com/partitio/atlas-app-toolkit/query/collection_operators.proto", fileDescriptor_68b1e11fc00ceab5)
}

var fileDescriptor_68b1e11fc00ceab5 = []byte{
	// 1169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x97, 0xd1, 0x4e, 0xe3, 0x46,
	0x17, 0xc7, 0xe3, 0xc4, 0x49, 0xc8, 0x81, 0x04, 0xef, 0xc0, 0xc7, 0x06, 0xd8, 0xfd, 0x96, 0x5a,
	0x95, 0x4a, 0xa5, 0x92, 0x68, 0xb3, 0xd2, 0x6a, 0x05, 0x37, 0x0d, 0x10, 0x0a, 0x15, 0x4b, 0x58,
	0x87, 0xbd, 0xd9, 0x9b, 0x68, 0x12, 0x26, 0xc6, 0xc2, 0x78, 0x5c, 0x7b, 0x42, 0x9b, 0x3e, 0x06,
	0x97, 0x55, 0xdf, 0xa4, 0x2f, 0xd0, 0x8b, 0x4a, 0x95, 0xfa, 0x0a, 0x7d, 0x91, 0x6a, 0xc6, 0xe3,
	0xc4, 0x76, 0xcc, 0x26, 0x59, 0x6e, 0x88, 0x7d, 0x74, 0xce, 0xff, 0x9c, 0xff, 0xf1, 0xcf, 0x61,
	0x02, 0x27, 0xa6, 0xc5, 0x6e, 0x86, 0xbd, 0x5a, 0x9f, 0xde, 0xd5, 0x5d, 0xec, 0x31, 0x8b, 0x59,
	0xb4, 0x8e, 0x99, 0x8d, 0xfd, 0x3d, 0xec, 0xba, 0x7b, 0x8c, 0x52, 0xfb, 0xd6, 0x62, 0xf5, 0x9f,
	0x86, 0xc4, 0x1b, 0xd5, 0xfb, 0xd4, 0xb6, 0x49, 0x9f, 0x59, 0xd4, 0xe9, 0x52, 0x97, 0x78, 0x98,
	0x51, 0xcf, 0xaf, 0xb9, 0x1e, 0x65, 0x14, 0xad, 0x58, 0xce, 0x80, 0xf6, 0x6c, 0xfa, 0x4b, 0x0d,
	0xbb, 0xd6, 0xd6, 0x77, 0x22, 0xd8, 0xdf, 0x33, 0x89, 0xb3, 0xe7, 0xff, 0x8c, 0x4d, 0x93, 0x78,
	0x75, 0xea, 0xf2, 0x42, 0xbf, 0x8e, 0x1d, 0x87, 0x32, 0x2c, 0xae, 0x83, 0x5a, 0x9d, 0xc1, 0x4a,
	0x87, 0x7a, 0xec, 0xc8, 0xb3, 0x18, 0xf1, 0x2c, 0x8c, 0x34, 0xc8, 0x31, 0x6c, 0x56, 0x95, 0x1d,
	0x65, 0xb7, 0x64, 0xf0, 0x4b, 0xf4, 0x16, 0xf2, 0xd4, 0xbb, 0x26, 0x5e, 0x35, 0xbb, 0xa3, 0xec,
	0x56, 0x1a, 0x3b, 0xb5, 0x68, 0xb7, 0x5a, 0xb4, 0xb8, 0xd6, 0xe6, 0x79, 0x46, 0x90, 0xae, 0x6f,
	0x41, 0x5e, 0xdc, 0xa3, 0x22, 0xe4, 0x9a, 0x9d, 0x23, 0x2d, 0x83, 0x96, 0x40, 0x3d, 0x6e, 0x75,
	0x8e, 0x34, 0x45, 0xc7, 0x50, 0xe4, 0x85, 0x96, 0x63, 0xa2, 0x77, 0x50, 0xea, 0xcb, 0x7a, 0xbf,
	0xaa, 0xec, 0xe4, 0x76, 0x97, 0x1b, 0x5b, 0x8f, 0xb7, 0x30, 0x26, 0xc9, 0xfb, 0x2f, 0x1e, 0x9a,
	0x9b, 0xf0, 0xbc, 0xf1, 0x4c, 0x6c, 0x4c, 0x64, 0xfa, 0x81, 0xe6, 0x6f, 0x59, 0xa5, 0xa8, 0xff,
	0xa9, 0x40, 0xe5, 0xc4, 0x22, 0xf6, 0x75, 0x87, 0xc8, 0xbd, 0xa1, 0xef, 0xa1, 0x30, 0xe0, 0x91,
	0xb0, 0xcf, 0x6e, 0xbc, 0x4f, 0x3c, 0x3b, 0xb8, 0xf5, 0x5b, 0x0e, 0xf3, 0x46, 0x86, 0xac, 0xdb,
	0xba, 0x80, 0xe5, 0x48, 0x98, 0x2f, 0xeb, 0x96, 0x8c, 0xc2, 0x65, 0xdd, 0x92, 0x11, 0xfa, 0x16,
	0xf2, 0xf7, 0xd8, 0x1e, 0x12, 0xb1, 0xac, 0xe5, 0xc6, 0x5a, 0x4a, 0x07, 0x23, 0xc8, 0xd8, 0xcf,
	0xbe, 0x53, 0xf6, 0xbf, 0x7e, 0x68, 0x7e, 0x05, 0xaf, 0x1a, 0x9b, 0x13, 0x0b, 0xa2, 0x51, 0xd7,
	0x0f, 0xa7, 0x10, 0x56, 0x7e, 0x57, 0x20, 0x2f, 0x4a, 0x11, 0x02, 0xd5, 0xc1, 0x77, 0x44, 0x76,
	0x14, 0xd7, 0xe8, 0x35, 0xa8, 0xfe, 0xb0, 0xe7, 0x57, 0xb3, 0xc2, 0xd3, 0xcb, 0x94, 0x8e, 0xb5,
	0xce, 0xb0, 0x27, 0x8d, 0x88, 0xd4, 0xad, 0x73, 0x28, 0x8d, 0x43, 0x4f, 0x36, 0xa1, 0xff, 0xa5,
	0x42, 0xe9, 0xc4, 0xb2, 0xf9, 0x53, 0x71, 0x4c, 0x74, 0x00, 0x4b, 0x21, 0x9f, 0x42, 0x73, 0x6a,
	0xa4, 0x73, 0x6a, 0x5a, 0x7d, 0x6c, 0xb7, 0x65, 0xd2, 0x69, 0xc6, 0x18, 0x17, 0xa0, 0x1f, 0x41,
	0xf3, 0x19, 0x97, 0xe9, 0xf6, 0xa9, 0x73, 0xcd, 0xdf, 0x07, 0x47, 0x0e, 0x91, 0x10, 0xe9, 0x88,
	0xac, 0xa3, 0x30, 0xe9, 0x34, 0x63, 0xac, 0xfa, 0xf1, 0x10, 0xd7, 0x72, 0x86, 0x77, 0x3d, 0xe2,
	0x45, 0xb4, 0x72, 0x69, 0x5a, 0x17, 0x22, 0x2b, 0xa6, 0xe5, 0xc4, 0x43, 0xe8, 0x18, 0x2a, 0xce,
	0xd0, 0xb6, 0x23, 0x4a, 0xaa, 0x50, 0xda, 0x4e, 0x2a, 0xd9, 0x76, 0x54, 0xa7, 0xec, 0x44, 0x03,
	0xe8, 0x13, 0x6c, 0x48, 0x77, 0xd8, 0xf3, 0xf0, 0x28, 0xa2, 0x96, 0x17, 0x6a, 0x7a, 0x9a, 0xc7,
	0x26, 0x4f, 0x8d, 0x8a, 0xae, 0xfb, 0x29, 0x71, 0xae, 0x2d, 0xdd, 0x26, 0xb5, 0x0b, 0x69, 0xda,
	0x81, 0xe7, 0x69, 0x6d, 0x27, 0x25, 0xce, 0xdd, 0xf7, 0x28, 0x8d, 0xba, 0x2f, 0xa6, 0xb9, 0x3f,
	0xa4, 0x34, 0xee, 0xbe, 0x17, 0x0d, 0xec, 0xff, 0xff, 0xa1, 0xb9, 0x0d, 0x9b, 0x8d, 0xb5, 0x28,
	0xeb, 0x12, 0x1a, 0x4e, 0xf9, 0x61, 0x01, 0x54, 0x8f, 0x52, 0xa6, 0xff, 0x03, 0xb0, 0x9a, 0x60,
	0x04, 0x1d, 0x43, 0xd9, 0x26, 0x03, 0xd6, 0x5d, 0x94, 0xac, 0x15, 0x5e, 0x35, 0x56, 0xe9, 0xc0,
	0xff, 0x84, 0xca, 0x97, 0x22, 0xb6, 0xc6, 0xab, 0x13, 0xe1, 0xb1, 0xe8, 0x97, 0xb2, 0x26, 0x44,
	0x13, 0x61, 0xf4, 0x1e, 0xd6, 0xa4, 0xe8, 0xe2, 0xd0, 0x3d, 0x0b, 0x04, 0xa3, 0xe0, 0xf5, 0x61,
	0x3b, 0x6a, 0x3c, 0x49, 0xc8, 0xf2, 0x02, 0xf4, 0x55, 0x27, 0x3b, 0x48, 0x50, 0x12, 0x36, 0x79,
	0x04, 0xc3, 0x95, 0x05, 0x30, 0xac, 0x4e, 0x76, 0x92, 0x68, 0x12, 0x2e, 0x26, 0xc1, 0xe3, 0xea,
	0x3c, 0x3c, 0x8a, 0xc5, 0xc4, 0x82, 0xe8, 0x04, 0x2a, 0x9e, 0x65, 0xde, 0x44, 0xc0, 0xca, 0xcf,
	0x03, 0x96, 0x62, 0x94, 0x45, 0xd9, 0x98, 0xac, 0x8f, 0xb0, 0x11, 0xe8, 0x4c, 0xa1, 0x55, 0x98,
	0x07, 0x2d, 0xc5, 0x58, 0x17, 0xe5, 0x49, 0xb6, 0xc6, 0xb2, 0x53, 0x70, 0x15, 0xe7, 0x81, 0x2b,
	0x94, 0x4d, 0xd2, 0xd5, 0x86, 0xf5, 0x50, 0x36, 0x86, 0xd7, 0xd2, 0x6c, 0xbc, 0x14, 0x03, 0x49,
	0xc9, 0x28, 0x5f, 0x04, 0x5e, 0xc4, 0xec, 0x27, 0x9f, 0x7d, 0x79, 0x6e, 0xc0, 0x14, 0x63, 0x33,
	0xb2, 0x89, 0xc4, 0xc3, 0x1f, 0xb7, 0x79, 0x04, 0xb1, 0xca, 0xdc, 0x88, 0x85, 0x6d, 0x52, 0x19,
	0x1b, 0xaf, 0x27, 0x01, 0x99, 0x36, 0x1b, 0xb2, 0x70, 0x3d, 0x71, 0xca, 0xde, 0x82, 0xca, 0x46,
	0x2e, 0xa9, 0x96, 0xc4, 0x01, 0x4a, 0xff, 0x2c, 0x5b, 0xb5, 0xab, 0x91, 0x4b, 0x0c, 0x91, 0x8f,
	0x5e, 0xc1, 0xb2, 0xe5, 0x77, 0x1d, 0x62, 0x62, 0x66, 0xdd, 0x93, 0x2a, 0xec, 0x28, 0xbb, 0x4b,
	0x06, 0x58, 0xfe, 0x85, 0x8c, 0xe8, 0xcf, 0x41, 0xe5, 0xe9, 0xe2, 0x84, 0x75, 0x71, 0xac, 0x65,
	0x50, 0x01, 0xb2, 0x6d, 0x43, 0x53, 0xf8, 0x77, 0xa9, 0x80, 0xbd, 0x08, 0x79, 0x31, 0x8f, 0xfe,
	0xaf, 0x02, 0xab, 0x49, 0xba, 0x5e, 0x02, 0x04, 0xa7, 0x0d, 0x17, 0xb3, 0x1b, 0x71, 0x24, 0x2a,
	0x19, 0x25, 0x11, 0xb9, 0xc4, 0xec, 0x06, 0xad, 0x47, 0x4f, 0x01, 0x25, 0xf9, 0x0f, 0x7f, 0xec,
	0x25, 0x97, 0xe6, 0x25, 0xd1, 0xe1, 0x33, 0x5e, 0xd4, 0x29, 0x2f, 0x87, 0xd2, 0x4b, 0x01, 0xb2,
	0xad, 0x0f, 0x5a, 0x06, 0x95, 0x20, 0xff, 0xbe, 0x79, 0x75, 0x74, 0xaa, 0x29, 0x3c, 0xf4, 0xc3,
	0x95, 0x96, 0x15, 0x9f, 0x2d, 0x2d, 0xc7, 0x3f, 0xcf, 0xaf, 0x34, 0x55, 0x7c, 0xb6, 0xb4, 0x3c,
	0xb7, 0x7f, 0xd6, 0xfa, 0xa0, 0x15, 0xf4, 0xbf, 0x15, 0x58, 0x4d, 0xc2, 0xbe, 0x88, 0x4b, 0x65,
	0x2e, 0x97, 0x89, 0x0e, 0x0b, 0xb9, 0xac, 0x25, 0x5c, 0x06, 0xd6, 0x14, 0x69, 0x2d, 0x2b, 0xad,
	0xe5, 0xa4, 0x35, 0x55, 0x6f, 0x43, 0x39, 0xfe, 0xaa, 0xcd, 0xb0, 0x93, 0x18, 0x20, 0x3b, 0x35,
	0x40, 0x1b, 0xca, 0x71, 0x38, 0x9f, 0x2a, 0xf8, 0x87, 0x02, 0xeb, 0xa9, 0x6f, 0xeb, 0x0c, 0xe1,
	0x0d, 0x28, 0x88, 0x5d, 0x07, 0x07, 0xd7, 0x92, 0x21, 0xef, 0xd0, 0x41, 0x6c, 0xf5, 0xdf, 0xcc,
	0xfe, 0xce, 0x58, 0x68, 0xff, 0x95, 0xc9, 0xfe, 0xcf, 0x2e, 0xb4, 0x8c, 0x98, 0x3e, 0xf5, 0x4b,
	0x60, 0xa1, 0xe9, 0x95, 0xf9, 0xa6, 0x4f, 0x6b, 0xf4, 0xa4, 0xe9, 0xef, 0x01, 0x2e, 0xb1, 0x69,
	0x39, 0x38, 0x1c, 0xd9, 0xc5, 0x26, 0xe9, 0x32, 0x7a, 0x4b, 0x1c, 0x79, 0x9e, 0x2f, 0xf1, 0xc8,
	0x15, 0x0f, 0xf0, 0x91, 0xe9, 0x60, 0xe0, 0x13, 0x26, 0x1e, 0x62, 0xde, 0x90, 0x77, 0xfc, 0x0d,
	0xb0, 0xad, 0x3b, 0x8b, 0x89, 0x99, 0xf3, 0x46, 0x70, 0xb3, 0xbf, 0xfd, 0xd0, 0xac, 0xc2, 0x46,
	0x43, 0x9b, 0x9c, 0xd6, 0x5c, 0xde, 0x29, 0xf8, 0x6d, 0xf5, 0x11, 0x96, 0x2e, 0xb1, 0x49, 0xce,
	0x9c, 0x01, 0x9d, 0xd5, 0x15, 0x81, 0xea, 0x5b, 0xbf, 0x12, 0xd9, 0x53, 0x5c, 0x47, 0x26, 0xc9,
	0x45, 0x27, 0x39, 0x7c, 0xf3, 0xe9, 0xf5, 0x02, 0xbf, 0x88, 0x0f, 0xc4, 0xdf, 0x5e, 0x41, 0xfc,
	0x8e, 0x7d, 0xf3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x28, 0x03, 0x75, 0x4d, 0x0f, 0x00,
	0x00,
}
